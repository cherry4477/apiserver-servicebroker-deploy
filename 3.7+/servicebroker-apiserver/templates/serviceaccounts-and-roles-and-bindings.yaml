
apiVersion: v1
kind: List
items:

- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: "apiserver"
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: controller-servicebroker


- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: ClusterRole
  metadata:
    name: "prd.asiainfo.com:apiserver"
  rules:
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs:     ["get", "list", "watch"]
# API-server service-account gets its own role
- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: ClusterRoleBinding
  metadata:
    name: "prd.asiainfo.com:apiserver"
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: "prd.asiainfo.com:apiserver"
  subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: "apiserver"
    namespace: "NAMESPACE"
# apiserver gets the auth-delegator role to delegate auth decisions to
# the core apiserver
- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: ClusterRoleBinding
  metadata:
    name: "prd.asiainfo.com:apiserver-auth-delegator"
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:auth-delegator
  subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: "apiserver"
    namespace: "NAMESPACE"
# apiserver gets the ability to read authentication. This allows it to
# read the specific configmap that has the requestheader-* entries to
# enable api aggregation
- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: RoleBinding
  metadata:
    name: "prd.asiainfo.com:apiserver-authentication-reader"
    namespace: kube-system
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: Role
    name: extension-apiserver-authentication-reader
  subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: "apiserver"
    namespace: "NAMESPACE"

### Controller-Manager ###

# controller-manager role defines what access the service-catalog
# controller-manager needs to manage the resources of the
# service-catalog
- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: ClusterRole
  metadata:
    name: "prd.asiainfo.com:controller-manager"
  rules:
  - apiGroups: [""]
    resources: ["events"]
    verbs:     ["create","patch","update"]
  # TODO: do not grant global access, limit to particular secrets referenced from serviceinstancecredentials
  - apiGroups: [""]
    resources: ["secrets"]
    verbs:     ["get","create","delete"]
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs:     ["get","list","watch"]
  # access to our service-catalog types
  - apiGroups: ["prd.asiainfo.com"]
    resources: ["servicebrokers","backingservices","backingserviceinstances"]
    verbs:     ["get","list","watch","create","patch","update","delete"]
  - apiGroups: ["prd.asiainfo.com"]
    resources: ["servicebrokers/status","backingservices/status","backingserviceinstances/status"]
    verbs:     ["update"]
# give the controller-manager service account access to whats defined in its role.
- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: ClusterRoleBinding
  metadata:
    name: "prd.asiainfo.com:controller-manager"
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: "prd.asiainfo.com:controller-manager"
  subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: controller-servicebroker
    namespace: "NAMESPACE"

